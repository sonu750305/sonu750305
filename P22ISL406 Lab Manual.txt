P.E.S. Education Trust (R), Mandya 

P.E.S. COLLEGE OF ENGINEERING 
(An Autonomous Institution Affiliated to VTU, Belagavi, Grant -in- Aid 

Institution (Government of Karnataka), World Bank Funded College (TEQIP), 
Accredited by NBA & NAAC and Approved by AICTE, New Delhi.) 

Mandya - 571401, Karnataka 
 

,, 

 
 

Design and Analysis of Algorithms 
Laboratory [P22ISL406] Manual  

 
 
 
 
 
 

 
Department of Information Science and Engineering 

P.E.S. College of Engineering 
Mandya - 571401, Karnataka 



P.E.S. College of Engineering, Mandya 
Department of Information Science & Engineering

DESIGN AND ANALYSIS OF ALGORITHMS LABORATORY 
[As per Choice Based Credit System (CBCS) & OBE Scheme] 

SEMESTER  IV 
Course Code:  P22ISL406 Credits:  01  
Teaching Hours/Week (L:T:P):  0:0:2  CIE Marks:  50  
Total Number of Lab Hours:  24 SEE Marks:  50  
Note: Implement the following programs using C Language 

Experiments 
1.  Print all the nodes reachable from a given starting node in a digraph using BFS method.

2.  Obtain the Topological ordering of vertices in a given digraph (DFS Based). 
3.  Sort a given set of elements using Merge sort method and determine the time taken to sort 

the elements. Repeat the experiment for different values of n, the number of elements in the 
list to be sorted and plot a graph of the time taken versus n. 

4.  Sort a given set of elements using Quick sort method and determine the time taken to sort 
the elements. Repeat the experiment for different values of n, the number of  elements in 
the list to be sorted and plot a graph of the time taken versus n. 

5.  Find the Patter  Algorithm.
6.  Sort a given set of elements using Heap Sort algorithm. 
7.  Implement 0/1 Knapsack problem using Dynamic Programming. 
8.  From a given vertex in a weighted connected graph, find shortest paths to other Vertices 

 
9.   Algorithm. 

10.  Implement Sum-of- Positive 
 

Course Outcomes: On completion of this course, students are able to: 
COs Course Outcomes with Action verbs for the Course topics 
CO1 Implement the algorithms based on various algorithm design techniques. 

CO2 Analyze the efficiency of various algorithms. 

CO-PO Mapping 

CO Statements PO PO PO PO PO PO PO PO PO PO PO PO PSO PSO
1 2 3 4 5 6 7 8 9 10 11 12 1 2 

CO1 Implement the  
algorithms based on 

2 2 2  2       1 2 2
various algorithm 
design techniques.  

CO2 Analyze the 
efficiency of various 2 2           1 1
algorithms. 

Page | 53



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

1) Print all the nodes reachable from a given starting node in a digraph using BFS 
method. 

 

 

 
 

PROGRAM: 

#include<stdio.h> 
#include<conio.h> 
 
int a[10][10], n; 
 
void bfs(int); 
 
 

Page 1 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

void main( ) 
{ 
 int i, j,src; 
 clrscr( ); 
 printf("\n enter the no of nodes:\t"); 
 scanf("%d", &n); 
 printf("\n enter the adjacency matrix:\n"); 
 for(i=1;i<=n;i++) 
 { 
  for(j=1;j<=n;j++) 
  { 
   scanf("%d", &a[i][j]); 
  } 
 } 
 printf("\n enter the source node:\t"); 
 scanf("%d", &src); 
 bfs(src); 
 getch( ); 
} 
 
void bfs(int src) 
{ 
 int q[10], f=0, r=-1, vis[10], i, j; 
 for(j=1;j<=n;j++) 
 { 
  vis[j]=0; 
 } 
 vis[src]=1; 
 r=r+1; 
 q[r]=src; 
 while(f<=r) 
 { 
  i=q[f]; 
  f=f+1; 
  for(j=1;j<=n;j++) 
  { 
   if(a[i][j]==1&&vis[j]!=1) 
   { 
    vis[j]=1; 
    r=r+1; 
    q[r]=j; 
   } 
  } 
 } 
 
 

Page 2 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

 for(j=1;j<=n;j++) 
 { 
  if(vis[j]!=1) 
  { 
   printf("\n Node %d is not reachable\n",j); 
  } 
  else 
  { 
   printf("\n Node %d is reachable\n",j); 
  } 
 } 
} 
 
==========Output============= 
 

 
 

===================== 

 

TIME COMPLEXITY PROGRAM FOR BFS METHOD: 
 

Modify the above program by adding start clock and stop clock, so that it will also display the 

time taken for execution [Hint: use clock( ) function defined in time.h header file]. 

 

 

 

 

 

 

 

 

Page 3 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

2) Obtain the Topological ordering of vertices in a given digraph. 

ALGORITHM: 

Step 1: Store each vertex’s In-Degree in an array in  
Step 2: While there are vertices remaining in the stack:  
              (i) PUSH any of these vertices whose In-Degree became zero to the stack 
              (ii) POP the stack and output a vertex to the array out  
              (iii) Reduce In-Degree of all vertices adjacent to it by 1 
 Step 3: If all vertices are outputted then success, otherwise there is a cycle.  
 

PROGRAM: 

#include<stdio.h> 
#include<conio.h> 
 

const int MAX = 10; 
 

void fnTopological(int a[MAX][MAX], int n); 
 

void main( ) 
{ 
 int a[MAX][MAX], n; 
 int i, j; 
 clrscr( ); 
 printf("\n Enter the number of vertices : "); 
 scanf("%d", &n); 
 

 printf("Enter the adjacency matrix -\n"); 
 for (i=0; i<n; i++) 
  for (j=0; j<n; j++) 
   scanf("%d", &a[i][j]); 
 

 fnTopological(a,n); 
 

 printf("\n"); 
 getch(); 
} 
 

void fnTopological(int a[MAX][MAX], int n) 
{ 
 int in[MAX], out[MAX], stack[MAX], top=-1; 
 int i, j, k=0; 
                                                                                           
 for (i=0;i<n;i++)                       
 { 
  in[i] = 0; 
  for (j=0; j<n; j++) 
   if (a[j][i] == 1) 
    in[i]++; 
 } 
 

Page 4 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

 while(1) 
 { 
  for (i=0;i<n;i++) 
  { 
   if (in[i] == 0) 
   { 
    stack[++top] = i; 
    in[i] = -1; 
   } 
  } 
  if (top == -1) 
   break; 
 
  out[k] = stack[top--]; 
 
  for (i=0;i<n;i++) 
  { 
   if (a[out[k]][i] == 1) 
    in[i]--; 
  } 
  k++; 
 } 
 
 printf("\nTopological Sorting is:- \n"); 
 for (i=0;i<k;i++) 
  printf("%d ",out[i] + 1); 
} 

==========Output============= 
Enter the number of vertices: 5 

Enter the adjacency matrix –  

0 0 1 0 0 

0 0 1 0 0 

0 0 0 1 1 

0 0 0 0 1 

0 0 0 0 0 

Topological Sorting is: - 
2 1 3 4 5 
===================== 
TIME COMPLEXITY PROGRAM FOR TOPOLOGICAL ORDERING: 
 

Modify the above program by adding start clock and stop clock, so that it will also display the 

time taken for execution [Hint: use clock( ) function defined in time.h header file]. 

Page 5 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

3) Sort a given set of elements using Merge sort method and determine the time taken 

to sort the elements. Repeat the experiment for different values of n, the number of 

elements in the list to be sorted and plot a graph of the time taken versus n. 

 

 

 

 

 
Page 6 of 34 

 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

PROGRAM: 

#include<stdio.h> 
#include<conio.h> 
#include<process.h> 
 

void split(int[], int, int); 
void combine(int[], int, int, int); 
 

void main( ) 
{ 
 int a[20], i, n; 
 clrscr( ); 
 printf("\n enter the no. of elements:\t"); 
 scanf("%d", &n); 
 printf("\n enter the elements:\n"); 
 for(i=0;i<=n-1;i++) 
 { 
  scanf("%d", &a[i]); 
 } 
 split(a, 0, n-1); 
 printf("\n the sorted array is:\n"); 
 for(i=0;i<=n-1;i++) 
 { 
  printf("%d\t",a[i]); 
 } 
 getch( ); 
} 
 
void split(int a[], int low, int high) 
{ 
 int mid; 
 if(low<high) 
 { 
  mid=(low+high)/2; 
  split(a,low,mid); 
  split(a,mid+1,high); 
  combine(a,low,mid,high); 
 } 
} 
 
void combine(int a[], int low, int mid, int high) 
{ 
 int c[20],i,j,k; 
 i=k=low; 
 j=mid+1; 
 while(i<=mid&&j<=high) 
 { 

Page 7 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

  if(a[i]<a[j]) 
  { 
   c[k]=a[i]; 
   ++k; 
   ++i; 
  } 
  else 
  { 
   c[k]=a[j]; 
   ++k; 
   ++j; 
  } 
 } 
 if(i>mid) 
 { 
  while(j<=high) 
  { 
   c[k]=a[j]; 
   ++k; 
   ++j; 
  } 
 } 
 if(j>high) 
 { 
  while(i<=mid) 
  { 
   c[k]=a[i]; 
   ++k; 
   ++i; 
  } 
 } 
 for(i=low;i<=high;i++) 
 { 
  a[i]=c[i]; 
 } 
} 

==========Output============= 

 
===================== 

Page 8 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

TIME COMPLEXITY PROGRAM FOR MERGE SORT: 

#include<stdio.h> 
#include<conio.h> 
#include<stdlib.h> 
#include<time.h> 
 

void split(int[], int, int); 
void combine(int[], int, int, int); 
 

void main() 
{ 
 int a[15000], i, j; 
 long int n=500; 
 clock_t start, end; 
 clrscr(); 
 while(n<=15000) 
 { 
  for(i=0;i<=n-1;i++) 
  { 
   a[i]=rand( ); 
  } 
  start=clock( ); 
  for(i=0;i<100;i++) 
  { 
    split(a, 0, n-1); 
  } 
  end=clock( ); 
  printf("\n the time taken for n=%lu is %f\n",n,(end-start)/CLK_TCK); 
  n=n+1000; 
 } 
 getch(); 
} 
 

void split(int a[],int low,int high) 
{ 
 int mid; 
 if(low<high) 
 { 
  mid=(low+high)/2; 
  split(a,low,mid); 
  split(a,mid+1,high); 
  combine(a,low,mid,high); 
 } 
} 
 

 
 
 

Page 9 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

void combine(int a[],int low, int mid, int high) 
{ 
 int c[15000],i,j,k; 
 i=k=low; 
 j=mid+1; 
 while(i<=mid&&j<=high) 
 { 
  if(a[i]<a[j]) 
  { 
   c[k]=a[i]; 
   ++k; 
   ++i; 
  } 
  else 
  { 
   c[k]=a[j]; 
   ++k; 
   ++j; 
  } 
 } 
 if(i>mid) 
 { 
  while(j<=high) 
  { 
   c[k]=a[j]; 
   ++k; 
   ++j; 
  } 
 } 
 if(j>high) 
 { 
  while(i<=mid) 
  { 
   c[k]=a[i]; 
   ++k; 
   ++i; 
  } 
 } 
 for(i=low;i<=high;i++) 
 { 
  a[i]=c[i]; 
 } 
} 
 

 

 
Page 10 of 34 

 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

==========Output============= 

 

 

===================== 

 

   

 

 

 

 

 

 

Page 11 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

4) Sort a given set of elements using Quick sort method and determine the time taken 

to sort the elements. Repeat the experiment for different values of n, the number of 

elements in the list to be sorted and plot a graph of the time taken versus n. 

ALGORITHM: partition(a[0….n-1], low, high) 
//partition the array into parts such that elements towards the left of the key element are 
//less than key element and elements //towards right of the key element are greater than 
//key element 

         //Input: An array a[0….n-1] is unsorted from index position low to high 
           //Output: A partition of a[0…n-1] with split position returned as This function’s value 

 

 

PROGRAM: 

#include<stdio.h> 
#include<conio.h> 
 
void quick_sort(int[ ], int, int); 
int partition(int[ ], int, int); 
 
 

Page 12 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

void main() 
{ 

int a[20], i, n; 
clrscr(); 
printf("\n Enter the no. of elements:\t"); 
scanf("%d", &n); 
printf("\n Enter the elements:\n"); 
for(i=0;i<=n-1;i++) 
{ 

scanf("%d", &a[i]); 
} 
quick_sort(a, 0, n-1); 
printf("\n The sorted array is:\n"); 
for(i=0;i<=n-1;i++) 
{ 

printf("%d\t", a[i]); 
} 
getch(); 

} 
 

void quick_sort(int a[], int low, int high) 
{ 

int j; 
if(low<high) 
{ 

j = partition(a, low, high); 
quick_sort(a, low, j-1); 
quick_sort(a, j+1, high); 

} 
} 
 

int partition(int a[ ], int low, int high) 
{ 
 int i, j, key, temp; 
 key = a[low]; 
 i = low+1; 
 j = high; 
 while(1) 
 { 
  while(a[i] < key && i <= high) 
  { 
   ++i; 
  } 
  while(a[j] > key && j >= low) 
  { 
   --j; 
  } 

Page 13 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

  if(i < j) 
  { 
   temp = a[i]; 
   a[i] = a[j]; 
   a[j] = temp; 
  } 
  else 
  { 
   temp = a[low]; 
   a[low] = a[j]; 
   a[j] = temp; 
   return j; 
  } 
 } 
} 

==========Output============= 

 

===================== 

 

 

 

 

 

 

 

 

 

 

 

 

 

Page 14 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

TIME COMPLEXITY PROGRAM FOR QUICK SORT: 

#include<stdio.h> 
#include<conio.h> 
#include<stdlib.h> 
#include<time.h> 
 

void quick_sort(int[ ], int, int); 
int partition(int[ ], int, int); 
 

void main() 
{ 

int a[3500], i, j; 
long int n=500; 
clock_t start, end; 
clrscr(); 
while(n<=3500) 
{ 

for(i=0;i<n;i++) 
{ 

a[i]=rand(); 
} 
start=clock(); 
for(j=0; j<100; j++) 
{ 

quick_sort(a, 0, n-1); 
} 
end=clock(); 
printf("\n the time taken for n=%lu is %f\n", n,(end-start)/CLK_TCK); 
n = n + 500; 

} 
getch(); 
} 
 

void quick_sort(int a[], int low, int high) 
{ 

int j; 
if(low<high) 
{ 

j=partition(a,low,high); 
quick_sort(a,low,j-1); 
quick_sort(a,j+1,high); 

} 
} 
int partition(int a[], int low, int high) 
{ 

int i, j, key, temp; 
key=a[low]; 

Page 15 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

i=low+1; 
j=high; 
while(1) 
{ 

while(a[i] <= key && i <= high) 
{ 

++i; 
} 
while(a[j] > key && j >= low) 
{ 

--j; 
} 
if(i < j) 
{ 

temp = a[i]; 
a[i] = a[j]; 
a[j] = temp; 

} 
else 
{ 

   temp = a[low]; 
   a[low] = a[j]; 
   a[j] = temp; 
   return j; 
  } 
 } 
} 
 

==========Output============= 

 
 

 

Page 16 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

5) Find the Pattern string in a given Text string using Horspool’s String Matching.  

 

 

 

PROGRAM: 
#include<stdio.h> 
#include<conio.h> 
#include<process.h> 
#include<string.h> 
 

int horspool(char[], char[]); 
 

void main() 
{ 
 char text[300], pattern[20]; int ans; 
 clrscr(); 
 printf("\n enter the text:\n"); 
 scanf("%s", text); 
 printf("\n enter the pattern:\n"); 
 scanf("%s", pattern); 
 ans=horspool(text, pattern); 
 if(ans==1)  
 { 
  printf("\n pattern found\n"); 
 } 
 else 
 { 
  printf("\n pattern is not found\n"); 
 } 
 getch(); 
} 

Page 17 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

int horspool(char text[], char pattern[]) 
{ 
 int i, j, m, n, shift[300]; 
 n=strlen(text); 
 m=strlen(pattern); 
 for(i=0; i<=n-1; i++) 
 { 
  shift[text[i]]=m; 
 } 
 for(j=0; j<=m-2; j++) 
 { 
  shift[pattern[j]]=m-1-j; 
 } 
 for(i=m-1; i<=n-1; i=i+shift[text[i]]) 
 { 
  j=0; 
  while(pattern[m-1-j]= =text[i-j] && j<=m-1) 
  { 
   ++j; 
  } 
  if(j==m) 
  { 
   return 1; 
  } 
 } 
 return 0; 
} 
 

==========Output============= 

 

 
===================== 

TIME COMPLEXITY PROGRAM FOR HORSPOOL ALGORITHM: 
 

Modify the above program by adding start clock and stop clock, so that it will also display the 

time taken for execution [Hint: use clock( ) function defined in time.h header file]. 

Page 18 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

6) Sort a given set of elements using Heap Sort algorithm and determine the time taken 

to sort the elements. Repeat the experiment for different values of n, the number of 

elements in the list to be sorted and plot a graph of the time taken versus n. 

 

 

 

Page 19 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

PROGRAM: 

#include<stdio.h> 
#include<conio.h> 
 
void build_heap(int[], int); 
void heapify(int[], int, int); 
void heap_sort(int[], int); 
 
void main() 
{ 

int a[10],i,n; 
clrscr(); 
printf("\n enter the no. of elements:\t"); 
scanf("%d", &n); 
printf("\n enter the elements:\n"); 
for(i=0; i<=n-1; i++) 
{ 

scanf("%d", &a[i]); 
} 
 
build_heap(a, n); 
heap_sort(a, n); 
 
printf("\n the sorted array is:\n"); 
for(i=0; i<=n-1; i++) 
{ 
printf("%d\t", a[i]); 
} 
getch(); 

} 
 
void build_heap(int a[], int n) 
{ 

int p; 
for(p=(n-1)/2; p>=0; p--) 
{ 

heapify(a, n, p); 
} 

} 
 
void heapify(int a[], int n, int p) 
{ 

int item, c; 
item=a[p]; 
c=2*p+1; 
 

Page 20 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

while(c <= n-1) 
{ 

if(c+1 <= n-1) 
{ 

if(a[c] < a[c+1]) 
{ 

c=c+1; 
} 

} 
if(item < a[c]) 
{ 

a[p]=a[c]; 
p=c; 
c=2*p+1; 

} 
else 
{ 

break; 
} 

} 
a[p]=item; 

} 
 
void heap_sort(int a[], int n) 
{ 

int i, temp; 
 for(i=n-1; i>0; i--) 
 { 

temp=a[0]; 
a[0]=a[i]; 
a[i]=temp; 
build_heap(a,i); 

} 
} 
 

==========Output============= 

 
===================== 

Page 21 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

TIME COMPLEXITY PROGRAM FOR HORSPOOL ALGORITHM: 
#include<stdio.h> 
#include<conio.h> 
#include<time.h> 
 

void build_heap(int[], int); 
void heapify(int[], int, int); 
void heap_sort(int[], int); 
 

void main() 
{ 

int a[16000], i;  long int n=500;  clock_t start,end; 
clrscr(); 
while(n <= 16000) 
{ 

for(i=0;i<=n-1;i++) 
{ 

a[i]=rand(); 
} 
start=clock(); 
build_heap(a,n); 
heap_sort(a,n); 
end=clock(); 
printf("\nthe time taken for n=%lu is %f\n", n,(end - start)/CLK_TCK); 
n=n+1000; 

} 
getch(); 

} 
 

void build_heap(int a[], int n) 
{ 

int p; 
for(p=(n-1)/2; p>=0; p--) 
{ 

heapify(a, n, p); 
} 

} 
 

void heapify(int a[], int n, int p) 
{ 

int item, c; 
item=a[p];  c=2*p+1; 
while(c <= n-1) 
{ 

if(c+1 <= n-1) 
{ 

if(a[c] < a[c+1]) 
 { 

Page 22 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

c=c+1; 
} 

} 
if(item < a[c]) 
{ 

a[p]=a[c]; 
 p=c; 
 c=2*p+1; 

} 
else 
{ 

break; 
} 

} 
a[p]=item; 

} 
 
void heap_sort(int a[], int n) 
{ 

int i, temp; 
 for(i=n-1; i>0; i--) 
 { 

temp=a[0];  a[0]=a[i]; a[i]=temp;   
build_heap(a,i); 

} 
} 

==========Output============= 

 

 

 
Page 23 of 34 

 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

7) Implement 0/1 Knapsack problem using Dynamic Programming. 
 

 

 

 
 
PROGRAM: 
 

#include<stdio.h> 
#include<conio.h> 
 

void knapsack(); 
 

int max(int, int); 
int i, j, n, m, p[10], w[10], v[10][10]; 

Page 24 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

void main( ) 
{ 

clrscr(); 
printf("\n enter the no. of items:\t");   scanf("%d", &n); 
printf("\n enter the weight of the each item:\n"); 
for(i=1; i<=n; i++) 
{ 

scanf("%d", &w[i]); 
} 
printf("\n enter the profit of each item:\n"); 
for(i=1; i<=n; i++) 
{ 

scanf("%d", &p[i]); 
} 
printf("\n enter the knapsack's capacity:\t"); 
scanf("%d", &m); 
knapsack(); 
getch(); 

} 
 
void knapsack( ) 
{ 

int x[10]; 
for(i=0;i<=n;i++) 
{ 

for(j=0;j<=m;j++) 
{ 

if(i==0 || j==0) 
{ 

v[i][j] = 0; 
} 
else if(j-w[i] < 0) 
{ 

v[i][j] = v[i-1][j]; 
} 
else 
{ 

v[i][j] = max(v[i-1][j],v[i-1][j-w[i]]+p[i]); 
} 

} 
} 
printf("\n the output is:\n"); 
for(i=0; i<=n; i++) 
{ 

for(j=0; j<=m; j++) 
{ 

Page 25 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

printf("%d\t", v[i][j]); 
} 
printf("\n\n"); 

} 
printf("\n the optimal solution is %d",v[n][m]); 
printf("\n the solution vector is:\n"); 
for(i=n; i>=1; i--) 
{ 

if(v[i][m] != v[i-1][m]) 
{ 

x[i]=1;      m=m-w[i]; 
} 
else 
{ 

x[i] = 0; 
} 

} 
for(i=1; i<=n; i++) 
{ 

printf("%d\t", x[i]); 
} 

} 
 

int max(int x, int y) 
{ 

if(x > y)  {   return x;   } 
else  {  return y;  } 

} 
 

 
 

===================== 
TIME COMPLEXITY PROGRAM FOR KNAPSACK PROBLEM ALGORITHM: 
 

Modify the above program by adding start clock and stop clock, so that it will also display the 
time taken for execution [Hint: use clock( ) function defined in time.h header file]. 

Page 26 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

8) From a given vertex in a weighted connected graph, find shortest paths to other 
vertices using Dijkstra’s algorithm. 

 

 

 

PROGRAM: 

#include<stdio.h> 
#include<conio.h> 
 

 
void dijkstras(); 
int c[10][10], n, src; 
 

 
void main() 
{ 
 int i,j; 
 clrscr(); 
 printf("\n enter the no. of vertices:\t"); 

Page 27 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

 scanf("%d", &n); 
 printf("\n enter the cost matrix:\n"); 
  
 for(i=1; i<=n; i++) 
 { 
   
  for(j=1; j<=n; j++) 
  { 
   scanf("%d", &c[i][j]); 
  } 
 } 
 printf("\n enter the source node:\t"); 
 scanf("%d", &src); 
 dijkstras(); 
 getch(); 
} 
 

 
void dijkstras() 
{ 
 int vis[10], dist[10], u, j, count, min; 
  
 for(j=1; j<=n; j++) 
 { 
  dist[j] = c[src][j]; 
 } 
  
 for(j=1; j<=n; j++) 
 { 
  vis[j]=0; 
 } 
  
 dist[src] = 0; 
 vis[src] = 1; 
 count = 1; 
  
 while(count != n) 
 { 
  min = 9999; 
  for(j=1; j<=n; j++) 
  { 
   if(dist[j] < min && vis[j] != 1) 
   { 
    min = dist[j]; 
    u = j; 
   } 
  } 

Page 28 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

  vis[u] = 1; 
  count++; 
  for(j=1; j<=n; j++) 
  { 
   if(min+c[u][j] < dist[j] && vis[j] != 1) 
   { 
    dist[j] = min + c[u][j]; 
   } 
  } 
 } 
  
 printf("\n the shortest distance is:\n"); 
  
 for(j=1; j<=n; j++) 
 { 
  printf("\n%d----->%d=%d",src, j, dist[j]); 
 } 
} 
 

==========Output============= 

 

 
===================== 

TIME COMPLEXITY PROGRAM FOR DIJKSTRA’S ALGORITHM: 
 

Modify the above program by adding start clock and stop clock, so that it will also display the 

time taken for execution [Hint: use clock( ) function defined in time.h header file]. 

 

 

 

 

Page 29 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

9) Find Minimum Cost Spanning Tree of a given undirected graph using Kruskal’s 
algorithm. 

 

 

 
 

PROGRAM: 

#include<stdio.h> 
#include<conio.h> 
 
void kruskals(); 
int c[10][10], n; 
 

Page 30 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

void main() 
{ 

int i, j; 
clrscr(); 
printf("\n enter the no. of vertices:\t"); 
scanf("%d", &n); 
printf("\n enter the cost matrix:\n"); 
for(i=1; i<=n; i++) 
{ 

for(j=1; j<=n; j++) 
{ 

scanf("%d", &c[i][j]); 
} 

} 
kruskals(); 
getch(); 

} 
 
void kruskals() 
{ 

int i, j, u, v, a, b, min; 
int ne=0, mincost=0; 
int parent[10]; 
for(i=1; i<=n; i++) 
{ 

parent[i] = 0; 
} 
while(ne != n-1) 
{ 

min=9999; 
for(i=1; i<=n; i++) 
{ 

for(j=1; j<=n; j++) 
{ 

if(c[i][j] < min) 
{ 

min = c[i][j]; 
u = a = i; 
v = b = j; 

} 
} 

} 
while(parent[u] != 0) 
{ 

u = parent[u]; 
} 

Page 31 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

while(parent[v] != 0) 
{ 

v = parent[v]; 
} 
if(u != v) 
{ 

printf("\n%d----->%d=%d\n", a, b, min); 
parent[v] = u; 
ne = ne+1; 
mincost = mincost + min; 

} 
c[a][b] = c[b][a] = 9999; 

} 
printf("\n mincost=%d", mincost); 
} 
 

 
 
TIME COMPLEXITY PROGRAM FOR KRUSKAL’S ALGORITHM: 
 

Modify the above program by adding start clock and stop clock, so that it will also display the time 

taken for execution [Hint: use clock( ) function defined in time.h header file]. 

 

 

 

 

 

 

 

Page 32 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

10) Implement Sum-of-Subset problem of a given set S = {s1, s2, ........., sn} of ‘n’ positive 
integers whose sum is equal to a given positive integer ‘d’. 

 
 

PROGRAM: 
#include<stdio.h> 
#include<conio.h> 
 

void subset(int, int, int); 
int count, d, s[10], x[10]; 
 

void main() 
{ 
int sum=0, count=0, i, n; 
clrscr(); 
printf("\n enter no. of elements:\t");   scanf("%d", &n); 
printf("\n enter the elements in ascending order:\n"); 
for(i=0; i<=n-1; i++) 
{ 

scanf("%d", &s[i]); 
} 
printf("\n enter the required sum:\t");   scanf("%d", &d); 
for(i=0; i<=n-1; i++) 
{ 

sum = sum + s[i]; 
} 
if(sum<d || s[0]>d) 
{ 

printf("no solution exists\n"); 
} 

Page 33 of 34 
 



Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

else 
{ 

subset(0, 0, sum); 
} 
getch(); 

} 
 

void subset(int m, int k, int sum) 
{ 

int i; 
x[k] = 1; 
if(m+s[k] = = d) 
{ 

printf("\n subset solution %d is\n",++count); 
for(i=0; i<=k; i++) 
{ 

if(x[i] = =1) 
{ 

printf("%d\t", s[i]); 
} 

} 
} 
else if(m+s[k]+s[k+1] <= d) 
{ 

subset(m+s[k], k+1, sum-s[k]); 
} 
if((m+sum-s[k] >=d ) && (m+s[k+1] <= d)) 
{ 

x[k] = 0; 
subset(m, k+1, sum-s[k]); 

} 
} 

 
TIME COMPLEXITY PROGRAM FOR SUM-OF-SUBSET ALGORITHM: 

Modify the above program by adding start clock and stop clock, so that it will also display the time 

taken for execution [Hint: use clock( ) function defined in time.h header file]. 

Page 34 of 34