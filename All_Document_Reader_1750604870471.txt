6) Sort a given set of elements using Heap Sort algorithm and determine the time
taken 

 
to sort the elements. Repeat the experiment for different values of n, the 
number of 

 
elements in the list to be sorted and plot a graph of the time taken versus n. 

 
PROGRAM: 

 
#include<stdio.h> 

#include<conio.h> 
 
void build_heap(int[], int); 
void heapify(int[], int, int); 
void heap_sort(int[], int); 
 
void main() 
{ 

 
int a[10],i,n; 
clrscr(); 
printf("\n enter the no. of elements:\t"); 
scanf("%d", &n); 
printf("\n enter the elements:\n"); 
for(i=0; i<=n-1; i++) 
{ 

 
scanf("%d", &a[i]); 
} 
 
build_heap(a, n); 
heap_sort(a, n); 
 
printf("\n the sorted array is:\n"); 
for(i=0; i<=n-1; i++) 
{ 
printf("%d\t", a[i]); 
} 
getch(); 

 

} 
 
void build_heap(int a[], int n) 
{ 

 
int p; 
for(p=(n-1)/2; p>=0; p--) 
{ 



 
heapify(a, n, p); 
} 

 
} 
 
void heapify(int a[], int n, int p) 
{ 

 
int item, c; 
item=a[p]; 
c=2*p+1; 
while(c <= n-1) 
{ 

 
if(c+1 <= n-1) 
{ 

 
if(a[c] < a[c+1]) 
{ 

 
c=c+1; 
} 

 
} 
if(item < a[c]) 
{ 

 
a[p]=a[c]; 
p=c; 
c=2*p+1; 

 
} 
else 

{ 

 
break; 
} 

 
} 
a[p]=item; 

 
} 
 
void heap_sort(int a[], int n) 
{ 

 
int i, temp; 



 for(i=n-1; i>0; i--) 
 { 

 
temp=a[0]; 
a[0]=a[i]; 
a[i]=temp; 
build_heap(a,i); 
} 
} 
 

 
7) Implement 0/1 Knapsack problem using Dynamic Programming. 
 
PROGRAM: 
 

 
#include<stdio.h> 
#include<conio.h> 
 

 
void knapsack(); 
 

 
int max(int, int); 
int i, j, n, m, p[10], w[10], v[10][10];
void main( ) 
{ 

 
clrscr(); 
printf("\n enter the no. of items:\t");   scanf("%d", &n); 
printf("\n enter the weight of the each item:\n"); 
for(i=1; i<=n; i++) 
{ 

 
scanf("%d", &w[i]); 
} 
printf("\n enter the profit of each item:\n"); 
for(i=1; i<=n; i++) 
{ 

 

scanf("%d", &p[i]); 
} 
printf("\n enter the knapsack's capacity:\t"); 
scanf("%d", &m); 
knapsack(); 
getch(); 

 
} 
 



void knapsack( ) 
{ 

 
int x[10]; 
for(i=0;i<=n;i++) 
{ 

 
for(j=0;j<=m;j++) 
{ 

 
if(i==0 || j==0) 
{ 

 
v[i][j] = 0; 
} 
else if(j-w[i] < 0) 
{ 

 

v[i][j] = v[i-1][j]; 
} 
else 
{ 

 
v[i][j] = max(v[i-1][j],v[i-1][j-w[i]]+p[i]); 
} 

 
} 
} 
printf("\n the output is:\n"); 
for(i=0; i<=n; i++) 
{ 

 
for(j=0; j<=m; j++) 
{ 

 
Page 25 of 34 
 

 
 

 
Design and Analysis of Algorithms Laboratory [P22ISL406] | BRAMESH S M 

 
printf("%d\t", v[i][j]); 
} 

printf("\n\n"); 



 
} 
printf("\n the optimal solution is %d",v[n][m]); 
printf("\n the solution vector is:\n"); 
for(i=n; i>=1; i--) 
{ 

 
if(v[i][m] != v[i-1][m]) 
{ 

 
x[i]=1;      m=m-w[i]; 
} 
else 
{ 

 
x[i] = 0; 
} 

 
} 
for(i=1; i<=n; i++) 
{ 

 
printf("%d\t", x[i]); 
} 

 

} 
 

 
int max(int x, int y) 
{ 

 
if(x > y)  {   return x;   } 
else  {  return y;  } 

 
}  
 
8) From a given vertex in a weighted connected graph, find shortest paths to 
other 
vertices using Dijkstra’s algorithm. 

#include<stdio.h> 
#include<conio.h> 
void dijkstras(); 
int c[10][10], n, src; 
void main() 
{ 
 int i,j; 
 clrscr(); 
 printf("\n enter the no. of vertices:\t"); 
 scanf("%d", &n); 
 printf("\n enter the cost matrix:\n"); 
  



 for(i=1; i<=n; i++) 
 { 
   
  for(j=1; j<=n; j++) 
  { 
   scanf("%d", &c[i][j]); 
  } 
 } 
 printf("\n enter the source node:\t"); 
 scanf("%d", &src); 
 dijkstras(); 
 getch(); 
} 
void dijkstras() 
{ 
 int vis[10], dist[10], u, j, count, min; 
  
 for(j=1; j<=n; j++) 
 { 
  dist[j] = c[src][j]; 
 } 
  
 for(j=1; j<=n; j++) 
 { 
  vis[j]=0; 
 } 
  
 dist[src] = 0; 
 vis[src] = 1; 
 count = 1; 
  
 while(count != n) 
 { 
  min = 9999; 
  for(j=1; j<=n; j++) 
  { 
   if(dist[j] < min && vis[j] != 1) 
   { 
    min = dist[j]; 
    u = j; 
   } 

  } 

 
 vis[u] = 1; 
  count++; 
  for(j=1; j<=n; j++) 
  { 
   if(min+c[u][j] < dist[j] && vis[j] != 1) 
   { 
    dist[j] = min + c[u][j]; 
   } 
  } 
 } 
  
 printf("\n the shortest distance is:\n"); 
  
 for(j=1; j<=n; j++) 
 { 
  printf("\n%d----->%d=%d",src, j, dist[j]); 
 } 



} 
 

 
9) Find Minimum Cost Spanning Tree of a given undirected graph using Kruskal’s 
algorithm. 
 
#include<stdio.h> 
#include<conio.h> 
 
void kruskals(); 
int c[10][10], n; 
void main() 
{ 

 
int i, j; 
clrscr(); 
printf("\n enter the no. of vertices:\t"); 
scanf("%d", &n); 
printf("\n enter the cost matrix:\n"); 
for(i=1; i<=n; i++) 
{ 

 
for(j=1; j<=n; j++) 
{ 

 
scanf("%d", &c[i][j]); 
} 

 

} 
kruskals(); 
getch(); 

 
} 
 
void kruskals() 
{ 

 
int i, j, u, v, a, b, min; 
int ne=0, mincost=0; 
int parent[10]; 
for(i=1; i<=n; i++) 
{ 

 
parent[i] = 0; 
} 
while(ne != n-1) 
{ 

 
min=9999; 
for(i=1; i<=n; i++) 
{ 



 
for(j=1; j<=n; j++) 
{ 

 

if(c[i][j] < min) 
{ 

 
min = c[i][j]; 
u = a = i; 
v = b = j; 

 
} 
} 

 
} 
while(parent[u] != 0) 
{ 

 
u = parent[u]; 
}  
while(parent[v] != 0) 
{ 
v = parent[v]; 
} 
if(u != v) 
{ 

 
printf("\n%d----->%d=%d\n", a, b, min); 
parent[v] = u; 
ne = ne+1; 
mincost = mincost + min; 

 
} 
c[a][b] = c[b][a] = 9999; 

 
} 
printf("\n mincost=%d", mincost); 
} 
 

 
10) Implement Sum-of-Subset problem of a given set S = {s1, s2, ........., sn} 
of ‘n’ positive 
integers whose sum is equal to a given positive integer ‘d’. 

#include<stdio.h> 
#include<conio.h> 
void subset(int, int, int); 
int count, d, s[10], x[10]; 
 

 



void main() 
{ 
int sum=0, count=0, i, n; 
clrscr(); 
printf("\n enter no. of elements:\t");   scanf("%d", &n); 
printf("\n enter the elements in ascending order:\n"); 
for(i=0; i<=n-1; i++) 
{ 

 
scanf("%d", &s[i]); 

} 
printf("\n enter the required sum:\t");   scanf("%d", &d); 
for(i=0; i<=n-1; i++) 
{ 

 
sum = sum + s[i]; 
} 
if(sum<d || s[0]>d) 
{ 

 
printf("no solution exists\n"); 
}  
else 
{ 
subset(0, 0, sum); 
} 
getch(); 
} 
void subset(int m, int k, int sum) 
{ 

 
int i; 
x[k] = 1; 
if(m+s[k] = = d) 
{ 

 
printf("\n subset solution %d is\n",++count); 
for(i=0; i<=k; i++) 
{ 

 
if(x[i] = =1) 
{ 

 
printf("%d\t", s[i]); 
} 

 
} 
} 
else if(m+s[k]+s[k+1] <= d) 
{ 



 
subset(m+s[k], k+1, sum-s[k]); 
} 
if((m+sum-s[k] >=d ) && (m+s[k+1] <= d)) 
{ 

 
x[k] = 0; 
subset(m, k+1, sum-s[k]); 

 
} 
} 