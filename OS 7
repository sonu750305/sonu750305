#include<stdio.h>
#include<conio.h>

void main() {
    int alloc[10][10], max[10][10], avail[10], need[10][10];
    int work[10], total[10];
    int i, j, k, n, m, count = 0;
    char finish[10];
    clrscr();

    printf("Enter number of processes and resources: ");
    scanf("%d%d", &n, &m);

    printf("Enter the max matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter the allocation matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter the total resources: ");
    for(i = 0; i < m; i++)
        scanf("%d", &total[i]);

    // Calculate Available
    for(i = 0; i < m; i++) {
        avail[i] = 0;
        for(j = 0; j < n; j++)
            avail[i] += alloc[j][i];
        work[i] = total[i] - avail[i];
    }

    // Calculate Need
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    for(i = 0; i < n; i++) finish[i] = 'n';

A:
    for(i = 0; i < n; i++) {
        int can_exec = 1;
        if(finish[i] == 'n') {
            for(j = 0; j < m; j++) {
                if(need[i][j] > work[j]) {
                    can_exec = 0;
                    break;
                }
            }
            if(can_exec) {
                printf("Process %d executed\n", i+1);
                for(k = 0; k < m; k++)
                    work[k] += alloc[i][k];
                finish[i] = 'y';
                count++;
            }
        }
    }

    if(count != n) goto A;
    else printf("System is in a safe state\n");

    getch();
}
